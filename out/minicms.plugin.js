// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var YAML, applyContext, cc, deepCopy, esc, exec, fs, generating, gm, iced, slug, slugify, slugs, urlify, uuid, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  urlify = require('urlify').create({
    addEToUmlauts: false,
    szToSs: true,
    spaces: '-',
    nonPrintable: '-',
    trim: true
  });

  slug = require('slug');

  slugs = {};

  slugify = function(str) {
    var res;
    res = slugs[str];
    if (res == null) {
      res = urlify(slug(str)).toLowerCase();
      slugs[str] = res;
    }
    return res;
  };

  cc = require('coffeecup');

  uuid = require('node-uuid');

  gm = require('gm');

  fs = require('fs');

  exec = require('child_process').exec;

  esc = function(arg) {
    return ('' + arg).replace(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/gm, '\\').replace(/\n/g, "'\n'").replace(/^$/, "''");
  };

  deepCopy = require('owl-deepcopy').deepCopy;

  YAML = require('yamljs');

  generating = null;

  applyContext = function(input, context) {
    var item, key, res, val, _i, _len;
    if (input instanceof Array) {
      res = [];
      for (_i = 0, _len = input.length; _i < _len; _i++) {
        item = input[_i];
        res.push(applyContext(item, context));
      }
      return res;
    } else if (typeof input === 'function') {
      return input.apply(context);
    } else if (typeof input === 'object') {
      res = {};
      for (key in input) {
        val = input[key];
        res[key] = applyContext(val, context);
      }
      return res;
    } else {
      return input;
    }
  };

  module.exports = function(BasePlugin) {
    var MinicmsPlugin;
    return MinicmsPlugin = (function(_super) {

      __extends(MinicmsPlugin, _super);

      function MinicmsPlugin() {
        return MinicmsPlugin.__super__.constructor.apply(this, arguments);
      }

      MinicmsPlugin.prototype.name = 'minicms';

      MinicmsPlugin.prototype.config = {
        prefix: {
          url: 'cms',
          meta: 'cms'
        },
        auth: function(login, password, callback) {
          if (login === 'admin' && password === 'password') {
            return callback(null, true);
          } else {
            return callback("Invalid login or password.", false);
          }
        },
        validate: function(field, val) {
          var expectedKeys, i, item, k, key, keys, v, _i, _j, _k, _len, _len1, _len2;
          if (field.optional && !(val != null)) return true;
          if (field.type === 'file' && field.images) {
            expectedKeys = [];
            for (key in field.images) {
              expectedKeys.push(key);
            }
            i = 0;
            if (typeof val !== 'object') return false;
            if (!(val != null)) return false;
            keys = [];
            for (k in val) {
              v = val[k];
              keys.push(k);
            }
            if (keys.length !== expectedKeys.length) return false;
            for (_i = 0, _len = expectedKeys.length; _i < _len; _i++) {
              k = expectedKeys[_i];
              if (!(__indexOf.call(keys, k) >= 0)) return false;
            }
            for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
              k = keys[_j];
              if (typeof val[k].url !== 'string') return false;
              if (typeof val[k].width !== 'number' || val[k].width < 1) {
                return false;
              }
              if (typeof val[k].height !== 'number' || val[k].height < 1) {
                return false;
              }
            }
            return true;
          } else if (field.type === 'text') {
            return typeof val === 'string' && val.trim().length > 0;
          } else if (field.type === 'textarea') {
            return typeof val === 'string' && val.trim().length > 0;
          } else if (field.type === 'wysiwyg') {
            return typeof val === 'string' && val.trim().length > 0;
          } else if (field.type === 'markdown') {
            return typeof val === 'string' && val.trim().length > 0;
          } else if (field.type === 'choice') {
            return typeof val === 'string' && val.trim().length > 0;
          } else if (field.type === 'date') {
            return typeof val === 'number' && Math.floor(val) === val;
          } else if (field.type === 'tags') {
            if (!(val instanceof Array)) return false;
            for (_k = 0, _len2 = val.length; _k < _len2; _k++) {
              item = val[_k];
              if (!typeof item === 'string') return false;
            }
            return true;
          } else {
            return false;
          }
        },
        sanitize: function(field, val) {
          var item, result, _i, _len;
          if (field.type === 'text') return val.trim();
          if (field.type === 'textarea') return val.trim();
          if (field.type === 'wysiwyg') {
            return val.split("\n").join(' ').split("\r").join(' ').trim();
          } else if (field.type === 'choice') {
            return val.trim();
          } else if (field.type === 'date') {
            return Math.floor(val / 1000) * 1000;
          } else if (field.type === 'tags') {
            if (!(val instanceof Array)) return [];
            result = [];
            for (_i = 0, _len = val.length; _i < _len; _i++) {
              item = val[_i];
              result.push(item.trim());
            }
            return result;
          } else {
            return val;
          }
        }
      };

      MinicmsPlugin.prototype.serverExtend = function(opts) {
        var app, config, docpad, express, handleEdit;
        app = opts.server;
        express = opts.express;
        docpad = this.docpad;
        config = this.config;
        exec("rm -rf " + (esc(docpad.config.srcPath + '/files/tmp')), function() {});
        app.use('/' + this.config.prefix.url, express["static"](__dirname + '/static'));
        if (!(this.config.secret != null)) {
          throw "Secret is required for cookie sessions (minicms)";
        }
        app.use(express.cookieParser());
        app.use(express.cookieSession({
          secret: this.config.secret
        }));
        app.get('/' + this.config.prefix.url + '/logout', function(req, res) {
          delete req.session.a;
          delete req.session.b;
          return res.redirect('/' + config.prefix.url + '/login');
        });
        app.get('/' + this.config.prefix.url + '/login', function(req, res) {
          req.session.b = 1;
          return res.send(cc.render(require('./components/layout/authenticate'), {
            layout: 'authenticate',
            url: req.url,
            config: config,
            prefix: config.prefix.url,
            title: 'Admin - Authenticate',
            slugify: slugify
          }));
        });
        app.post('/' + this.config.prefix.url + '/login', function(req, res) {
          var time;
          if (!req.session.b || !(config.auth != null)) {
            res.redirect(req.url);
            return;
          }
          time = new Date().getTime();
          if (req.session.c && req.session.c > time - 1000) {
            req.session.b = 0;
            res.redirect(req.url);
            return;
          }
          req.session.c = time;
          return config.auth(req.body.login, req.body.password, function(err, result) {
            if (result) {
              req.session.a = 1;
              if (req.query.url) {
                return res.redirect(req.query.url);
              } else {
                return res.redirect('/' + config.prefix.url);
              }
            } else {
              return res.redirect(req.url);
            }
          });
        });
        app.get('/' + this.config.prefix.url, function(req, res) {
          var content, _ref;
          if (!((_ref = req.session) != null ? _ref.a : void 0)) {
            res.redirect('/' + config.prefix.url + '/login?url=' + req.url);
            return;
          }
          content = cc.render(require('./components/layout/index'), {
            config: config,
            slugify: slugify
          });
          res.set('Content-Type', 'text/html; charset=UTF-8');
          return res.send(cc.render(require('./components/layout'), {
            layout: 'index',
            url: req.url,
            config: config,
            prefix: config.prefix.url,
            title: 'Admin',
            content: content,
            slugify: slugify
          }));
        });
        app.get('/' + this.config.prefix.url + '/:content/list', function(req, res) {
          var comps, content, context, data, filter, filterData, filters, i, item, key, len, makeFilter, model, val, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
          if (!((_ref = req.session) != null ? _ref.a : void 0)) {
            res.redirect('/' + config.prefix.url + '/login?url=' + req.url);
            return;
          }
          model = null;
          _ref1 = config.models;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            if (slugify(item.name[0]) === req.params.content) model = item;
          }
          if ((model != null ? model.list : void 0) == null) {
            req.redirect('/' + config.prefix.url);
            return;
          }
          context = {
            docpad: docpad,
            slugify: slugify
          };
          filters = {};
          if ((req.query.filters != null) && typeof req.query.filters === 'string') {
            comps = req.query.filters.split(' ').join('/').split('/');
            len = comps.length;
            i = 0;
            while (i < len) {
              key = comps[i];
              val = comps[i + 1];
              i += 2;
              if (typeof val === 'string' && val.length) {
                key = slugify(key);
                val = slugify(val);
                context[key] = val;
                filters[key] = val;
              }
            }
          }
          filterData = [];
          if (model.list.filters != null) {
            _ref2 = model.list.filters;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              filter = _ref2[_j];
              data = filter.data;
              if (typeof data === 'function') {
                data = data.apply({
                  docpad: docpad
                });
              }
              if (data instanceof Array) {
                data = deepCopy(data);
                data.sort();
              } else {
                data = [];
              }
              filterData.push(data);
            }
          }
          data = (_ref3 = model.list) != null ? _ref3.data : void 0;
          if (typeof data === 'function') {
            data = data.apply(context);
            if ((_ref4 = data.models) != null ? _ref4.length : void 0) {
              data = data.toJSON();
            } else if (!(data != null) || !(data instanceof Array)) {
              data = [];
            }
          }
          makeFilter = function(key, val) {
            var k, v;
            comps = [];
            key = slugify(key);
            if (val != null) {
              val = slugify(val);
              comps.push(key + '/' + val);
            }
            for (k in filters) {
              v = filters[k];
              if (k !== key) comps.push(k + '/' + v);
            }
            if (comps.length) return '?filters=' + comps.join('+');
            return '';
          };
          content = cc.render(require('./components/layout/list'), {
            filters: filters,
            filterData: filterData,
            config: config,
            model: model,
            slugify: slugify,
            data: data,
            makeFilter: makeFilter
          });
          res.set('Content-Type', 'text/html; charset=UTF-8');
          return res.send(cc.render(require('./components/layout'), {
            layout: 'list',
            model: model,
            url: req.url,
            config: config,
            prefix: config.prefix.url,
            title: 'Admin - ' + model.name[1],
            content: content,
            slugify: slugify
          }));
        });
        handleEdit = function(req, res) {
          var allValid, component, components, computed, computedData, content, context, data, deps, doc, err, errors, exists, ext, fieldData, fieldsData, filesPath, filesToRemove, finalContext, finalData, format, imgContext, imgExists, imgUrl, item, itemExists, itemPath, k, key, keys, meta, model, newExists, newUrl, newUrlDirs, path, pathDirs, prevExists, prevUrl, realUrl, remove, save, scriptLoaded, successes, toRemove, url, urlForFile, v, val, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3,
            _this = this;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          if (!((_ref = req.session) != null ? _ref.a : void 0)) {
            res.redirect('/' + config.prefix.url + '/login?url=' + req.url);
            return;
          }
          model = null;
          data = null;
          _ref1 = config.models;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            if (slugify(item.name[0]) === req.params.content) model = item;
          }
          if ((model != null ? model.form : void 0) == null) {
            res.set('Content-Type', 'text/plain');
            res.status(404).send('Not Found');
            return;
          }
          item = null;
          if (req.query.url != null) {
            realUrl = (req.query.url === '/index' ? '/' : req.query.url);
            item = (_ref2 = docpad.getCollection('html').findOne({
              url: realUrl
            })) != null ? _ref2.toJSON() : void 0;
          }
          if ((item != null ? item[config.prefix.meta] : void 0) != null) {
            data = deepCopy(item[config.prefix.meta]);
          } else {
            data = {};
            item = null;
          }
          remove = false;
          if (!save) if (req.body["do"] === 'delete') remove = true;
          save = false;
          if (!remove && (req.body.fields != null)) {
            try {
              fieldsData = JSON.parse(req.body.fields);
              for (key in fieldsData) {
                val = fieldsData[key];
                data[key] = val;
              }
              if (req.body["do"] === 'save') save = true;
            } catch (_error) {}
          }
          context = {};
          if (data != null) {
            for (key in data) {
              val = data[key];
              context[key] = val;
            }
          }
          context.docpad = docpad;
          components = [];
          scriptLoaded = {};
          computedData = {};
          valid = {};
          deps = {};
          keys = [];
          errors = [];
          successes = [];
          finalData = {};
          allValid = true;
          _ref3 = model.form.components;
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            component = _ref3[_j];
            computed = {};
            if (!scriptLoaded[component.field]) {
              scriptLoaded[component.field] = true;
              computed.shouldLoadScript = true;
            }
            for (key in component) {
              val = component[key];
              if (typeof val === 'function' && key !== 'validate' && key !== 'sanitize') {
                computed[key] = val.apply(context);
              } else {
                computed[key] = val;
              }
            }
            computed.config = config;
            computed.slugify = slugify;
            computed.model = model;
            computed.value = data != null ? data[computed.field] : null;
            computedData[computed.field] = computed.value;
            valid[computed.field] = false;
            try {
              valid[computed.field] = config.validate.apply(context, [component, computed.value]);
            } catch (e) {
              console.log("base validator of " + computed.field + " thrown exception.");
              console.log(e);
            }
            if (valid[computed.field]) {
              if (typeof component.validate === 'function') {
                try {
                  valid[computed.field] = !!component.validate.apply(context, [computed.value]);
                } catch (e) {
                  console.log("validator of " + computed.field + " thrown exception.");
                  console.log(e);
                  valid[computed.field] = false;
                }
              } else {
                valid[computed.field] = true;
              }
            }
            computed.valid = valid[computed.field];
            allValid = allValid && computed.valid;
            keys.push(computed.field);
            deps[computed.field] = [];
            if (computed.deps != null) deps[computed.field] = computed.deps;
            computed.form = 'edit';
            if (computed.label == null) {
              computed.label = computed.field.charAt(0).toUpperCase() + computed.field.substring(1);
            }
            if (save) {
              if (!computed.valid) {
                errors.push({
                  field: computed.field,
                  message: "" + computed.label + " is not valid."
                });
                computed.error = {
                  message: "" + computed.label + " is not valid."
                };
              } else {
                finalData[computed.field] = computed.value;
                try {
                  finalData[computed.field] = config.sanitize.apply(context, [component, finalData[computed.field]]);
                } catch (_error) {}
                if (component.sanitize != null) {
                  finalData[computed.field] = component.sanitize.apply(context, [finalData[computed.field]]);
                } else {
                  finalData[computed.field] = finalData[computed.field];
                }
              }
            }
            try {
              components.push(cc.render(require('./components/input/' + computed.type), computed));
            } catch (e) {
              console.log('Failed to render ' + computed.type + ' component for ' + computed.field + ' field.');
              throw e;
            }
          }
          (function(__iced_k) {
            if (save && allValid) {
              finalContext = {};
              if (data != null) {
                for (key in finalData) {
                  val = finalData[key];
                  finalContext[key] = val;
                }
              }
              finalContext.docpad = docpad;
              finalContext.slugify = slugify;
              url = applyContext(model.form.url, finalContext);
              path = docpad.config.srcPath + '/documents' + url + '.' + model.form.ext;
              if (item != null) {
                urlForFile = (item.url === '/' ? '/index' : item.url);
                itemPath = docpad.config.srcPath + '/documents' + urlForFile + '.' + model.form.ext;
              }
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/minicms.plugin.coffee",
                  funcname: "handleEdit"
                });
                fs.exists(path, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return exists = arguments[0];
                    };
                  })(),
                  lineno: 468
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (exists && !(item != null)) {
                    return __iced_k(errors.push({
                      message: 'The file ' + url + '.' + model.form.ext + ' already exists.'
                    }));
                  } else {
                    (function(__iced_k) {
                      var _k, _len2, _ref4, _results, _while;
                      _ref4 = model.form.components;
                      _len2 = _ref4.length;
                      _k = 0;
                      _results = [];
                      _while = function(__iced_k) {
                        var _break, _continue, _next;
                        _break = function() {
                          return __iced_k(_results);
                        };
                        _continue = function() {
                          return iced.trampoline(function() {
                            ++_k;
                            return _while(__iced_k);
                          });
                        };
                        _next = function(__iced_next_arg) {
                          _results.push(__iced_next_arg);
                          return _continue();
                        };
                        if (!(_k < _len2)) {
                          return _break();
                        } else {
                          component = _ref4[_k];
                          (function(__iced_k) {
                            if (component.type === 'file' && (component.images != null)) {
                              (function(__iced_k) {
                                if (finalData[component.field] != null) {
                                  fieldData = finalData[component.field];
                                  filesPath = docpad.config.srcPath + '/files';
                                  (function(__iced_k) {
                                    var _keys, _l, _m, _ref5, _results1, _while;
                                    _ref5 = component.images;
                                    _keys = (function() {
                                      var _results2;
                                      _results2 = [];
                                      for (_l in _ref5) {
                                        _results2.push(_l);
                                      }
                                      return _results2;
                                    })();
                                    _m = 0;
                                    _results1 = [];
                                    _while = function(__iced_k) {
                                      var _break, _continue, _next;
                                      _break = function() {
                                        return __iced_k(_results1);
                                      };
                                      _continue = function() {
                                        return iced.trampoline(function() {
                                          ++_m;
                                          return _while(__iced_k);
                                        });
                                      };
                                      _next = function(__iced_next_arg) {
                                        _results1.push(__iced_next_arg);
                                        return _continue();
                                      };
                                      if (!(_m < _keys.length)) {
                                        return _break();
                                      } else {
                                        key = _keys[_m];
                                        val = _ref5[key];
                                        prevUrl = fieldData[key].url;
                                        (function(__iced_k) {
                                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                                            parent: ___iced_passed_deferral,
                                            filename: "src/minicms.plugin.coffee",
                                            funcname: "handleEdit"
                                          });
                                          fs.exists(filesPath + prevUrl, __iced_deferrals.defer({
                                            assign_fn: (function() {
                                              return function() {
                                                return prevExists = arguments[0];
                                              };
                                            })(),
                                            lineno: 481
                                          }));
                                          __iced_deferrals._fulfill();
                                        })(function() {
                                          ext = 'jpg';
                                          (function(__iced_k) {
                                            if (prevExists) {
                                              (function(__iced_k) {
                                                __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                  parent: ___iced_passed_deferral,
                                                  filename: "src/minicms.plugin.coffee",
                                                  funcname: "handleEdit"
                                                });
                                                gm(filesPath + prevUrl).format(__iced_deferrals.defer({
                                                  assign_fn: (function() {
                                                    return function() {
                                                      err = arguments[0];
                                                      return format = arguments[1];
                                                    };
                                                  })(),
                                                  lineno: 484
                                                }));
                                                __iced_deferrals._fulfill();
                                              })(function() {
                                                var _ref6;
                                                return __iced_k(err ? process.stderr.write("" + ((_ref6 = err.message) != null ? _ref6 : err) + "\n") : (ext = format.toLowerCase().slice(0, 3), ext === 'jpe' ? ext = 'jpg' : void 0));
                                              });
                                            } else {
                                              return __iced_k();
                                            }
                                          })(function() {
                                            imgContext = {};
                                            for (k in finalContext) {
                                              v = finalContext[k];
                                              imgContext[k] = v;
                                            }
                                            imgContext.ext = ext;
                                            newUrl = applyContext(component.images[key].url, imgContext);
                                            (function(__iced_k) {
                                              if (newUrl !== prevUrl) {
                                                newUrlDirs = newUrl.slice(0, newUrl.lastIndexOf('/'));
                                                (function(__iced_k) {
                                                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                    parent: ___iced_passed_deferral,
                                                    filename: "src/minicms.plugin.coffee",
                                                    funcname: "handleEdit"
                                                  });
                                                  exec("mkdir -p " + (esc(filesPath + newUrlDirs)), __iced_deferrals.defer({
                                                    assign_fn: (function() {
                                                      return function() {
                                                        return err = arguments[0];
                                                      };
                                                    })(),
                                                    lineno: 497
                                                  }));
                                                  __iced_deferrals._fulfill();
                                                })(function() {
                                                  (function(__iced_k) {
                                                    if (prevExists) {
                                                      (function(__iced_k) {
                                                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                          parent: ___iced_passed_deferral,
                                                          filename: "src/minicms.plugin.coffee",
                                                          funcname: "handleEdit"
                                                        });
                                                        fs.exists(filesPath + newUrl, __iced_deferrals.defer({
                                                          assign_fn: (function() {
                                                            return function() {
                                                              return newExists = arguments[0];
                                                            };
                                                          })(),
                                                          lineno: 499
                                                        }));
                                                        __iced_deferrals._fulfill();
                                                      })(function() {
                                                        (function(__iced_k) {
                                                          if (newExists) {
                                                            (function(__iced_k) {
                                                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                                parent: ___iced_passed_deferral,
                                                                filename: "src/minicms.plugin.coffee",
                                                                funcname: "handleEdit"
                                                              });
                                                              fs.unlink(filesPath + newUrl, __iced_deferrals.defer({
                                                                assign_fn: (function() {
                                                                  return function() {
                                                                    return err = arguments[0];
                                                                  };
                                                                })(),
                                                                lineno: 501
                                                              }));
                                                              __iced_deferrals._fulfill();
                                                            })(function() {
                                                              var _ref6;
                                                              return __iced_k(err ? process.stderr.write("" + ((_ref6 = err.message) != null ? _ref6 : err) + "\n") : void 0);
                                                            });
                                                          } else {
                                                            return __iced_k();
                                                          }
                                                        })(function() {
                                                          (function(__iced_k) {
                                                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                              parent: ___iced_passed_deferral,
                                                              filename: "src/minicms.plugin.coffee",
                                                              funcname: "handleEdit"
                                                            });
                                                            fs.rename(filesPath + prevUrl, filesPath + newUrl, __iced_deferrals.defer({
                                                              assign_fn: (function() {
                                                                return function() {
                                                                  return err = arguments[0];
                                                                };
                                                              })(),
                                                              lineno: 503
                                                            }));
                                                            __iced_deferrals._fulfill();
                                                          })(function() {
                                                            var _ref6;
                                                            return __iced_k(err ? process.stderr.write("" + ((_ref6 = err.message) != null ? _ref6 : err) + "\n") : void 0);
                                                          });
                                                        });
                                                      });
                                                    } else {
                                                      return __iced_k();
                                                    }
                                                  })(function() {
                                                    finalData[component.field][key].url = newUrl;
                                                    return __iced_k(finalContext[component.field][key].url = newUrl);
                                                  });
                                                });
                                              } else {
                                                return __iced_k();
                                              }
                                            })(_next);
                                          });
                                        });
                                      }
                                    };
                                    _while(__iced_k);
                                  })(__iced_k);
                                } else {
                                  filesPath = docpad.config.srcPath + '/files';
                                  (function(__iced_k) {
                                    var _keys, _l, _m, _ref5, _results1, _while;
                                    _ref5 = component.images;
                                    _keys = (function() {
                                      var _results2;
                                      _results2 = [];
                                      for (_l in _ref5) {
                                        _results2.push(_l);
                                      }
                                      return _results2;
                                    })();
                                    _m = 0;
                                    _results1 = [];
                                    _while = function(__iced_k) {
                                      var _break, _continue, _next;
                                      _break = function() {
                                        return __iced_k(_results1);
                                      };
                                      _continue = function() {
                                        return iced.trampoline(function() {
                                          ++_m;
                                          return _while(__iced_k);
                                        });
                                      };
                                      _next = function(__iced_next_arg) {
                                        _results1.push(__iced_next_arg);
                                        return _continue();
                                      };
                                      if (!(_m < _keys.length)) {
                                        return _break();
                                      } else {
                                        key = _keys[_m];
                                        val = _ref5[key];
                                        (function(__iced_k) {
                                          var _len3, _n, _ref6, _results2, _while;
                                          _ref6 = ['jpg', 'gif', 'png'];
                                          _len3 = _ref6.length;
                                          _n = 0;
                                          _results2 = [];
                                          _while = function(__iced_k) {
                                            var _break, _continue, _next;
                                            _break = function() {
                                              return __iced_k(_results2);
                                            };
                                            _continue = function() {
                                              return iced.trampoline(function() {
                                                ++_n;
                                                return _while(__iced_k);
                                              });
                                            };
                                            _next = function(__iced_next_arg) {
                                              _results2.push(__iced_next_arg);
                                              return _continue();
                                            };
                                            if (!(_n < _len3)) {
                                              return _break();
                                            } else {
                                              ext = _ref6[_n];
                                              imgContext = {};
                                              for (k in finalContext) {
                                                v = finalContext[k];
                                                imgContext[k] = v;
                                              }
                                              imgContext.ext = ext;
                                              imgUrl = applyContext(component.images[key].url, imgContext);
                                              (function(__iced_k) {
                                                __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                  parent: ___iced_passed_deferral,
                                                  filename: "src/minicms.plugin.coffee",
                                                  funcname: "handleEdit"
                                                });
                                                fs.exists(filesPath + imgUrl, __iced_deferrals.defer({
                                                  assign_fn: (function() {
                                                    return function() {
                                                      return imgExists = arguments[0];
                                                    };
                                                  })(),
                                                  lineno: 516
                                                }));
                                                __iced_deferrals._fulfill();
                                              })(function() {
                                                (function(__iced_k) {
                                                  if (imgExists) {
                                                    (function(__iced_k) {
                                                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                        parent: ___iced_passed_deferral,
                                                        filename: "src/minicms.plugin.coffee",
                                                        funcname: "handleEdit"
                                                      });
                                                      fs.unlink(filesPath + imgUrl, __iced_deferrals.defer({
                                                        assign_fn: (function() {
                                                          return function() {
                                                            return err = arguments[0];
                                                          };
                                                        })(),
                                                        lineno: 518
                                                      }));
                                                      __iced_deferrals._fulfill();
                                                    })(function() {
                                                      var _ref7;
                                                      return __iced_k(err ? process.stderr.write("" + ((_ref7 = err.message) != null ? _ref7 : err) + "\n") : void 0);
                                                    });
                                                  } else {
                                                    return __iced_k();
                                                  }
                                                })(_next);
                                              });
                                            }
                                          };
                                          _while(__iced_k);
                                        })(_next);
                                      }
                                    };
                                    _while(__iced_k);
                                  })(__iced_k);
                                }
                              })(__iced_k);
                            } else {
                              return __iced_k();
                            }
                          })(_next);
                        }
                      };
                      _while(__iced_k);
                    })(function() {
                      meta = applyContext(model.form.meta, finalContext);
                      meta[config.prefix.meta] = finalData;
                      content = applyContext(model.form.content, finalContext);
                      doc = "```\n" + (YAML.stringify(meta, 8, 4).trim()) + "\n```\n" + content;
                      pathDirs = path.slice(0, path.lastIndexOf('/'));
                      (function(__iced_k) {
                        if ((item != null) && (itemPath != null)) {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "src/minicms.plugin.coffee",
                              funcname: "handleEdit"
                            });
                            fs.unlink(itemPath, __iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  return err = arguments[0];
                                };
                              })(),
                              lineno: 535
                            }));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        } else {
                          return __iced_k();
                        }
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "src/minicms.plugin.coffee",
                            funcname: "handleEdit"
                          });
                          fs.exists(path, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return itemExists = arguments[0];
                              };
                            })(),
                            lineno: 536
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          (function(__iced_k) {
                            if (itemExists) {
                              (function(__iced_k) {
                                __iced_deferrals = new iced.Deferrals(__iced_k, {
                                  parent: ___iced_passed_deferral,
                                  filename: "src/minicms.plugin.coffee",
                                  funcname: "handleEdit"
                                });
                                fs.unlink(path, __iced_deferrals.defer({
                                  assign_fn: (function() {
                                    return function() {
                                      return err = arguments[0];
                                    };
                                  })(),
                                  lineno: 538
                                }));
                                __iced_deferrals._fulfill();
                              })(__iced_k);
                            } else {
                              return __iced_k();
                            }
                          })(function() {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "src/minicms.plugin.coffee",
                                funcname: "handleEdit"
                              });
                              exec("mkdir -p " + (esc(pathDirs)), __iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return err = arguments[0];
                                  };
                                })(),
                                lineno: 539
                              }));
                              __iced_deferrals._fulfill();
                            })(function() {
                              (function(__iced_k) {
                                __iced_deferrals = new iced.Deferrals(__iced_k, {
                                  parent: ___iced_passed_deferral,
                                  filename: "src/minicms.plugin.coffee",
                                  funcname: "handleEdit"
                                });
                                fs.writeFile(path, doc, __iced_deferrals.defer({
                                  assign_fn: (function() {
                                    return function() {
                                      return err = arguments[0];
                                    };
                                  })(),
                                  lineno: 542
                                }));
                                __iced_deferrals._fulfill();
                              })(function() {
                                realUrl = (url === '/index' ? '/' : url);
                                setTimeout((function() {
                                  if (docpad.getCollection('html').findOne({
                                    url: realUrl
                                  }) != null) {
                                    return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/edit?url=' + url);
                                  } else {
                                    return setTimeout((function() {
                                      if (docpad.getCollection('html').findOne({
                                        url: realUrl
                                      }) != null) {
                                        return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/edit?url=' + url);
                                      } else {
                                        return setTimeout((function() {
                                          if (docpad.getCollection('html').findOne({
                                            url: realUrl
                                          }) != null) {
                                            return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/edit?url=' + url);
                                          } else {
                                            return docpad.generate({
                                              reset: true
                                            }, function() {
                                              return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/list');
                                            });
                                          }
                                        }), 5000);
                                      }
                                    }), 2500);
                                  }
                                }), 1000);
                                return;
                                return __iced_k();
                              });
                            });
                          });
                        });
                      });
                    });
                  }
                })(__iced_k);
              });
            } else {
              (function(__iced_k) {
                var _k, _len2, _ref4, _ref5;
                if (remove) {
                  filesToRemove = [];
                  urlForFile = (item.url === '/' ? '/index' : item.url);
                  filesToRemove.push(docpad.config.srcPath + '/documents' + urlForFile + '.' + model.form.ext);
                  _ref4 = model.form.components;
                  for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                    component = _ref4[_k];
                    if (component.type === 'file' && (component.images != null)) {
                      fieldData = data[component.field];
                      filesPath = docpad.config.srcPath + '/files';
                      _ref5 = component.images;
                      for (key in _ref5) {
                        val = _ref5[key];
                        imgUrl = applyContext(component.images[key].url, context);
                        filesToRemove.push(filesPath + imgUrl);
                      }
                    }
                  }
                  (function(__iced_k) {
                    var _l, _len3, _ref6, _results, _while;
                    _ref6 = filesToRemove;
                    _len3 = _ref6.length;
                    _l = 0;
                    _results = [];
                    _while = function(__iced_k) {
                      var _break, _continue, _next;
                      _break = function() {
                        return __iced_k(_results);
                      };
                      _continue = function() {
                        return iced.trampoline(function() {
                          ++_l;
                          return _while(__iced_k);
                        });
                      };
                      _next = function(__iced_next_arg) {
                        _results.push(__iced_next_arg);
                        return _continue();
                      };
                      if (!(_l < _len3)) {
                        return _break();
                      } else {
                        toRemove = _ref6[_l];
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "src/minicms.plugin.coffee",
                            funcname: "handleEdit"
                          });
                          fs.unlink(toRemove, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return err = arguments[0];
                              };
                            })(),
                            lineno: 587
                          }));
                          __iced_deferrals._fulfill();
                        })(_next);
                      }
                    };
                    _while(__iced_k);
                  })(function() {
                    url = applyContext(model.form.url, context);
                    setTimeout((function() {
                      if (!(docpad.getCollection('html').findOne({
                        url: url
                      }) != null)) {
                        return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/list');
                      } else {
                        return setTimeout((function() {
                          if (!(docpad.getCollection('html').findOne({
                            url: url
                          }) != null)) {
                            return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/list');
                          } else {
                            return setTimeout((function() {
                              if (!(docpad.getCollection('html').findOne({
                                url: url
                              }) != null)) {
                                return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/list');
                              } else {
                                return docpad.generate({
                                  reset: true
                                }, function() {
                                  return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/list');
                                });
                              }
                            }), 5000);
                          }
                        }), 2500);
                      }
                    }), 1000);
                    return;
                    return __iced_k();
                  });
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            }
          })(function() {
            content = cc.render(require('./components/layout/edit'), {
              form: 'edit',
              config: config,
              model: model,
              slugify: slugify,
              item: item,
              data: computedData,
              components: components,
              deps: deps,
              keys: keys,
              valid: valid,
              errors: errors,
              successes: successes
            });
            res.set('Content-Type', 'text/html; charset=UTF-8');
            return res.send(cc.render(require('./components/layout'), {
              layout: 'edit',
              model: model,
              url: req.url,
              config: config,
              prefix: config.prefix.url,
              title: 'Admin - ' + model.name[1],
              content: content,
              slugify: slugify
            }));
          });
        };
        app.get('/' + this.config.prefix.url + '/:content/edit', handleEdit);
        app.post('/' + this.config.prefix.url + '/:content/edit', handleEdit);
        app.post('/' + this.config.prefix.url + '/generate', function(req, res) {
          var time, _ref;
          if (!((_ref = req.session) != null ? _ref.a : void 0)) {
            res.redirect('/' + config.prefix.url + '/login?url=' + req.url);
            return;
          }
          if (generating) {
            res.set('Content-Type', 'application/json; charset=UTF-8');
            res.send(JSON.stringify({
              result: 0
            }));
            return;
          }
          generating = true;
          time = new Date().getTime();
          return docpad.generate({
            reset: true
          }, function() {
            generating = false;
            res.set('Content-Type', 'application/json; charset=UTF-8');
            return res.send(JSON.stringify({
              result: new Date().getTime() - time
            }));
          });
        });
        return app.post('/' + this.config.prefix.url + '/:content/:field/upload', function(req, res) {
          var component, errs, field, file, item, model, options, result, rnd, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
            _this = this;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          if (!((_ref = req.session) != null ? _ref.a : void 0)) {
            res.redirect('/' + config.prefix.url + '/login?url=' + req.url);
            return;
          }
          model = null;
          _ref1 = config.models;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            if (slugify(item.name[0]) === req.params.content) model = item;
          }
          if ((model != null ? model.form : void 0) == null) {
            res.set('Content-Type', 'text/plain');
            res.status(404).send('Not Found');
            return;
          }
          field = req.params.field;
          file = (_ref2 = req.files) != null ? (_ref3 = _ref2.file) != null ? _ref3[field] : void 0 : void 0;
          options = null;
          _ref4 = model.form.components;
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            component = _ref4[_j];
            if (component.field === field) {
              options = component;
              break;
            }
          }
          if (!((options != null ? options.type : void 0) != null) || options.type !== 'file' || !(options.images != null)) {
            res.set('Content-Type', 'application/json');
            res.status(404).send({
              error: 'Invalid field.'
            });
            return;
          }
          if (!file) {
            res.set('Content-Type', 'application/json');
            res.status(404).send({
              error: 'Please upload a valid file.'
            });
            return;
          }
          if (options.images != null) {
            if (!((_ref5 = file.type) === 'image/png' || _ref5 === 'image/jpeg' || _ref5 === 'image/gif')) {
              res.set('Content-Type', 'application/json');
              res.status(404).send({
                error: 'File type ' + file.type + ' is not valid. Please upload PNG, JPEG or GIF file.'
              });
              return;
            }
            rnd = (uuid.v1() + '' + uuid.v4()).split('-').join('').substring(0, 48);
            result = {};
            errs = [];
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/minicms.plugin.coffee"
              });
              fs.mkdir(docpad.config.srcPath + '/files/tmp', __iced_deferrals.defer({
                lineno: 687
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(gm(file.path).format(function(err, format) {
                if (err != null) {
                  res.set('Content-Type', 'application/json');
                  res.status(404).send({
                    error: 'Invalid image file.'
                  });
                  return;
                }
                format = format.toLowerCase().slice(0, 3);
                if (format === 'jpe') format = 'jpg';
                return gm(file.path).size(function(err, size) {
                  var dx, dy, err, ext, fnParts, height, i, key, path, scale, url, val, width, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
                    _this = this;
                  __iced_k = __iced_k_noop;
                  ___iced_passed_deferral1 = iced.findDeferral(arguments);
                  if (err != null) {
                    res.set('Content-Type', 'application/json');
                    res.status(404).send({
                      error: 'Invalid image file.'
                    });
                    return;
                  }
                  if (format === 'gif') {
                    if (size.width < 1000 && size.height > 10000) {
                      size.height = ('' + size.height).slice(0, 3);
                    } else if (size.height < 1000 && size.width > 10000) {
                      size.width = ('' + size.width).slice(0, 3);
                    }
                  }
                  (function(__iced_k) {
                    var _k, _keys, _l, _ref6, _results, _while;
                    _ref6 = options.images;
                    _keys = (function() {
                      var _results1;
                      _results1 = [];
                      for (_k in _ref6) {
                        _results1.push(_k);
                      }
                      return _results1;
                    })();
                    _l = 0;
                    _results = [];
                    _while = function(__iced_k) {
                      var _break, _continue, _m, _next, _ref7;
                      _break = function() {
                        return __iced_k(_results);
                      };
                      _continue = function() {
                        return iced.trampoline(function() {
                          ++_l;
                          return _while(__iced_k);
                        });
                      };
                      _next = function(__iced_next_arg) {
                        _results.push(__iced_next_arg);
                        return _continue();
                      };
                      if (!(_l < _keys.length)) {
                        return _break();
                      } else {
                        key = _keys[_l];
                        val = _ref6[key];
                        fnParts = options.images[key].url.toString().split('.');
                        ext = 'jpg';
                        for (i = _m = _ref7 = fnParts.length - 1; _ref7 <= 0 ? _m <= 0 : _m >= 0; i = _ref7 <= 0 ? ++_m : --_m) {
                          if (fnParts[i].slice(0, 3) === 'ext') {
                            ext = format;
                            break;
                          }
                          if (fnParts[i].slice(0, 3) === 'jpg' || fnParts[i].slice(0, 4) === 'jpeg') {
                            ext = 'jpg';
                            break;
                          } else if (fnParts[i].slice(0, 3) === 'png') {
                            ext = 'png';
                            break;
                          } else if (fnParts[i].slice(0, 3) === 'gif') {
                            ext = 'gif';
                            break;
                          }
                        }
                        url = '/tmp/' + rnd + '.' + key + '.' + ext;
                        path = docpad.config.srcPath + '/files' + url;
                        (function(__iced_k) {
                          if (val.crop) {
                            scale = Math.max(val.width / size.width, val.height / size.height);
                            width = Math.round(size.width * scale);
                            height = Math.round(size.height * scale);
                            dx = Math.floor((width - val.width) / 2);
                            dy = Math.floor((height - val.height) / 2);
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral1,
                                filename: "src/minicms.plugin.coffee"
                              });
                              gm(file.path).resize(width, height).crop(val.width, val.height, dx, dy).noProfile().write(path, __iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return err = arguments[0];
                                  };
                                })(),
                                lineno: 738
                              }));
                              __iced_deferrals._fulfill();
                            })(function() {
                              width = val.width;
                              return __iced_k(height = val.height);
                            });
                          } else {
                            scale = Math.min(val.width / size.width, val.height / size.height);
                            width = Math.round(size.width * scale);
                            height = Math.round(size.height * scale);
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral1,
                                filename: "src/minicms.plugin.coffee"
                              });
                              gm(file.path).resize(width, height).noProfile().write(path, __iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return err = arguments[0];
                                  };
                                })(),
                                lineno: 745
                              }));
                              __iced_deferrals._fulfill();
                            })(__iced_k);
                          }
                        })(function() {
                          (function(__iced_k) {
                            if (err) {
                              errs.push(err);
                              (function(__iced_k) {
                                _break();
                              })(__iced_k);
                            } else {
                              return __iced_k();
                            }
                          })(function() {
                            return _next(result[key] = {
                              url: url,
                              width: width,
                              height: height
                            });
                          });
                        });
                      }
                    };
                    _while(__iced_k);
                  })(function() {
                    if (errs.length) {
                      res.set('Content-Type', 'application/json');
                      return res.status(404).send({
                        error: 'Error when resizing image.'
                      });
                    } else {
                      res.set('Content-Type', 'application/json; charset=UTF-8');
                      return res.send(JSON.stringify({
                        result: result
                      }));
                    }
                  });
                });
              }));
            });
          } else {
            res.set('Content-Type', 'application/json');
            res.status(404).send({
              error: 'Not handled in this version.'
            });
            return;
            return __iced_k();
          }
        });
      };

      return MinicmsPlugin;

    })(BasePlugin);
  };

}).call(this);
